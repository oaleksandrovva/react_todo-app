{"version":3,"sources":["components/TodoForm/TodoForm.jsx","TodosContext.jsx","hooks/useLocalStorage.js","components/TodoItem/TodoItem.jsx","hooks/useMountEffect.jsx","hooks/useFocus.jsx","components/TodoList/TodoList.jsx","components/TodoFilter/TodoFilter.jsx","TodoApp.js","index.js"],"names":["TodoForm","React","memo","onAddNewTodo","useState","id","Date","title","completed","newTodo","setNewTodo","onSubmit","clickEvent","preventDefault","type","className","placeholder","value","onChange","handleEvent","target","previousTodo","required","TodosContext","createContext","todos","setTodos","TodosProvider","children","key","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","contextValue","useMemo","Provider","TodoItem","handler","dependencies","useContext","wasDoubleClicked","setWasDoubleClicked","editingTitle","setEditingTitle","htmlElRef","useRef","current","focus","useFocus","inputRef","setInputFocus","leaveSameTitle","handleUpdateTitle","map","todo","useEffect","onDoubleClick","checked","onClick","filter","ref","onBlur","onKeyDown","TodoList","reverse","TodoFilter","activeTodos","completedTodos","setFilter","onDeleteCompletedTodos","length","href","textContent","TodoApp","addNewTodo","useCallback","filterTodos","filterBy","deleteCompletedTodos","filteredTodos","some","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d65271c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoForm = React.memo(({ onAddNewTodo }) => {\n  const [newTodo, setNewTodo] = useState({\n    id: +new Date(),\n    title: '',\n    completed: false,\n  });\n\n  const handleSubmit = (clickEvent) => {\n    clickEvent.preventDefault();\n\n    onAddNewTodo(newTodo);\n\n    setNewTodo({\n      id: +new Date(),\n      title: '',\n      completed: false,\n    });\n  };\n\n  const handleChangeInput = (handleEvent) => {\n    const { value } = handleEvent.target;\n\n    setNewTodo(previousTodo => ({\n      ...previousTodo,\n      title: value,\n    }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo.title}\n        onChange={handleChangeInput}\n        required\n      />\n    </form>\n  );\n});\n\nTodoForm.propTypes = {\n  onAddNewTodo: PropTypes.func.isRequired,\n};\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocalStorage } from './hooks/useLocalStorage';\n\nexport const TodosContext = React.createContext({\n  todos: [],\n  setTodos: () => { },\n});\n\nexport const TodosProvider = ({ children }) => {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n\n  const contextValue = useMemo(() => ({\n    todos,\n    setTodos,\n  }), [todos, setTodos]);\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n\nTodosProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const saveInLocalStorage = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, saveInLocalStorage];\n};\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport className from 'classnames';\n\nimport { TodosContext } from '../../TodosContext';\nimport { useFocus } from '../../hooks/useFocus';\nimport { useMountEffect } from '../../hooks/useMountEffect';\n\nexport const TodoItem = ({ id, title, completed }) => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [wasDoubleClicked, setWasDoubleClicked] = useState(false);\n  const [editingTitle, setEditingTitle] = useState(title);\n  const [inputRef, setInputFocus] = useFocus();\n\n  const handleCompleteTodo = () => {\n    setTodos(todos.map(todo => (\n      (todo.id !== id)\n        ? todo\n        : {\n          ...todo,\n          completed: !todo.completed,\n        }\n    )));\n  };\n\n  const handleDeleteTodo = () => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const handleEditingTitle = (handleEvent) => {\n    const { value } = handleEvent.target;\n\n    setEditingTitle(value);\n  };\n\n  const leaveSameTitle = () => {\n    setEditingTitle(title);\n    setWasDoubleClicked(false);\n  };\n\n  const handleUpdateTitle = () => {\n    if (editingTitle !== '') {\n      setTodos(todos.map(todo => (\n        (todo.id !== id)\n          ? todo\n          : {\n            ...todo,\n            title: editingTitle,\n          }\n      )));\n\n      setWasDoubleClicked(false);\n    } else {\n      leaveSameTitle();\n    }\n  };\n\n  const handleOnKeyDown = (handleEvent) => {\n    if (handleEvent.key === 'Enter') {\n      handleUpdateTitle();\n    }\n\n    if (handleEvent.key === 'Escape') {\n      leaveSameTitle();\n    }\n  };\n\n  useMountEffect(setInputFocus, wasDoubleClicked);\n\n  return (\n    <li\n      className={className(\n        completed ? 'completed' : '',\n        wasDoubleClicked ? 'editing' : '',\n      )}\n      onDoubleClick={() => setWasDoubleClicked(true)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={handleCompleteTodo}\n          checked={completed}\n        />\n        <label>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={handleDeleteTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editingTitle}\n        ref={inputRef}\n        onBlur={handleUpdateTitle}\n        onChange={handleEditingTitle}\n        onKeyDown={handleOnKeyDown}\n        required\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n","import { useEffect } from 'react';\n\nexport const useMountEffect = (handler, dependencies) => (\n  useEffect(handler, [dependencies])\n);\n","import { useRef } from 'react';\n\nexport const useFocus = () => {\n  const htmlElRef = useRef(null);\n  const setFocus = () => htmlElRef.current && htmlElRef.current.focus();\n\n  return [htmlElRef, setFocus];\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({ todos }) => (\n  <ul className=\"todo-list\">\n    {todos && todos.map(({ id, title, completed }) => (\n      <TodoItem\n        key={id}\n        id={id}\n        title={title}\n        completed={completed}\n      />\n    )).reverse()}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport className from 'classnames';\n\nexport const TodoFilter = ({\n  activeTodos,\n  completedTodos,\n  filter,\n  setFilter,\n  onDeleteCompletedTodos,\n}) => (\n  <>\n    <span className=\"todo-count\">\n      {`${activeTodos.length} items left`}\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={className(\n            filter === 'All' ? 'selected' : '',\n          )}\n          onClick={clickEvent => setFilter(clickEvent.target.textContent)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={className(\n            filter === 'Active' ? 'selected' : '',\n          )}\n          onClick={clickEvent => setFilter(clickEvent.target.textContent)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={className(\n            filter === 'Completed' ? 'selected' : '',\n          )}\n          onClick={clickEvent => setFilter(clickEvent.target.textContent)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    {completedTodos.length > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onDeleteCompletedTodos}\n      >\n        Clear completed\n      </button>\n    )}\n  </>\n);\n\nTodoFilter.propTypes = {\n  activeTodos: PropTypes.instanceOf(Array).isRequired,\n  completedTodos: PropTypes.instanceOf(Array).isRequired,\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  onDeleteCompletedTodos: PropTypes.func.isRequired,\n};\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\nimport { TodoForm } from './components/TodoForm';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nimport { TodosContext } from './TodosContext';\n\nfunction TodoApp() {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [filter, setFilter] = useState('All');\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const addNewTodo = useCallback((newTodo) => {\n    setTodos([...todos, newTodo]);\n  }, [todos, setTodos]);\n\n  const handleToggleAll = () => (\n    (todos.some(todo => !todo.completed))\n      ? setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })))\n      : setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })))\n  );\n\n  const filterTodos = useCallback((filterBy) => {\n    switch (filterBy) {\n      case 'Active':\n        return activeTodos;\n      case 'Completed':\n        return completedTodos;\n      case 'All':\n      default:\n        return todos;\n    }\n  }, [todos, activeTodos, completedTodos]);\n\n  const deleteCompletedTodos = useCallback(() => {\n    setTodos(activeTodos);\n  }, [activeTodos, setTodos]);\n\n  const filteredTodos = useMemo(\n    () => filterTodos(filter),\n    [filter, filterTodos],\n  );\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <TodoForm onAddNewTodo={addNewTodo} />\n      </header>\n\n      {!!todos.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={handleToggleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList todos={filteredTodos} />\n\n          </section>\n\n          <footer className=\"footer\">\n            <TodoFilter\n              activeTodos={activeTodos}\n              completedTodos={completedTodos}\n              todos={filteredTodos}\n              filter={filter}\n              setFilter={setFilter}\n              onDeleteCompletedTodos={deleteCompletedTodos}\n            />\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './TodoApp';\nimport { TodosProvider } from './TodosContext';\n\nReactDOM.render(\n  <TodosProvider>\n    <TodoApp />\n  </TodosProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}